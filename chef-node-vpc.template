{
    "AWSTemplateFormatVersion" : "2010-09-09",

    "Description" : "Instance with chef-solo and chef-client, to be passed a configurable run list in an upstream template.  A WaitCondition is used to hold up the stack creation until the application is deployed.",

    "Parameters" : {
        "KeyName" : {
            "Description" : "Name of an existing EC2 KeyPair to enable SSH access",
            "Type" : "String" 
        },

        "RecipeURL" : {
            "Description" : "The location of the recipe tarball",
            "Type" : "String"
        },

        "EC2SecurityGroup" : {
            "Default" : "default",
            "Description" : "The EC2 Security Group to which this instance will be assigned",
            "Type" : "String"
        },

        "StackNameOrId" : {
            "Description" : "The StackName or StackId containing the resource with the Chef configuration metadata",
            "Type" : "String",
            "MinLength" : "1",
            "MaxLength" : "128"
        },

        "ResourceName" : {
            "Description" : "The Logical Resource Name in the stack defined by StackName containing the resource with the Chef configuration metadata",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "128",
            "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*"
        },

        "InstanceType" : {
            "Type" : "String", 
            "Default" : "m3.medium",
            "AllowedValues" : [ "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "c3.large" ],
            "Description" : "EC2 instance type (e.g. m3.large, m3.xlarge, r3.xlarge)"
        },

        "InstanceZone" : {
            "Description" : "AvailabilityZone for this instance",
            "Type" : "String"
        },

        "VolumeSize" : {
            "Description" : "Volume size for each EBS volume",
            "Type" : "Number",
            "Default" : "10"
        },

        "DesiredCapacity" : {
            "Default" : "1",
            "Type": "Number",
            "MinValue": "1",
            "MaxValue": "25",
            "Description" : "Port for web servers to listen on"
        },

        "ChefServerURL" : {
            "Description" : "URL of Chef Server",
            "Type" : "String"
        },

        "ChefServerPrivateKeyBucket" : {
            "Description" : "S3 bucket containing validation key for Chef Server",
            "Type" : "String"
        },

        "ChefEnvironment" : {
            "Description" : "Chef Environment for instances",
            "Type" : "String"
        }
    },

    "Mappings" : {
        "AWSInstanceType2Arch" : {
            "m1.small"    : { "Arch" : "64" },
            "m3.medium"   : { "Arch" : "64" },
            "m3.large"    : { "Arch" : "64" },
            "m3.xlarge"   : { "Arch" : "64" },
            "m3.2xlarge"  : { "Arch" : "64" },
            "r3.large"    : { "Arch" : "64" },
            "r3.xlarge"   : { "Arch" : "64" },
            "r3.2xlarge"  : { "Arch" : "64" },
            "r3.4xlarge"  : { "Arch" : "64" },
            "r3.8xlarge"  : { "Arch" : "64" },
            "c3.large"    : { "Arch" : "64" }
        },

        "AWSRegionArch2AMI" : {
            "us-east-1"      : { "64" : "ami-24498a4c" },
            "us-west-2"      : { "64" : "ami-3da8d10d" }
        }
    },

    "Resources" : {

        "CfnUser" : {
            "Type" : "AWS::IAM::User",
            "Properties" : {
                "Path": "/",
                "Policies": [{
                    "PolicyName": "root",
                    "PolicyDocument": { "Statement":[{
                        "Effect":"Allow",
                        "Action": [
                            "cloudformation:DescribeStackResource",
                            "s3:Get"
                        ],
                        "Resource":"*"
                    }]}
                }]
            }
        },

        "HostKeys" : {
            "Type" : "AWS::IAM::AccessKey",
            "Properties" : {
                "UserName" : {"Ref": "CfnUser"}
            }
        },

        "AutoScalingGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "LaunchConfigurationName": { "Ref": "LaunchConfig" },
                "AvailabilityZones": [{ "Ref": "InstanceZone" }],
                "MinSize": "1",
                "MaxSize": "1",
                "DesiredCapacity" : { "Ref" : "DesiredCapacity" }
            }
        },

        "LaunchConfig": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Metadata" : {
                "AWS::CloudFormation::Init": {
                    "config": {
                        "packages": {
                        },
                        "files": {
                            "/etc/chef/solo.rb": {
                                "content": {
                                    "Fn::Join": [
                                        "", [
                                            "log_level :info\n",
                                            "log_location STDOUT\n",
                                            "file_cache_path \"/var/chef-solo\"\n",
                                            "cookbook_path \"/var/chef-solo/cookbooks\"\n",
                                            "json_attribs \"/etc/chef/node.json\"\n",
                                            "recipe_url \"", {
                                                "Ref": "RecipeURL"
                                            }, "\"\n"
                                        ]
                                    ]
                                },
                                "mode": "000644",
                                "owner": "root",
                                "group": "wheel"
                            },
                            "/etc/chef/node.json": {
                                "content": {
                                    "run_list": [  ]
                                },
                                "mode": "000644",
                                "owner": "root",
                                "group": "wheel"
                            },
                            "/etc/chef/chef.json": {
                                "content": {
                                    "chef_client": {
                                        "server_url": { "Ref": "ChefServerURL" },
                                        "validation_client_name": { "Ref": "ChefValidationClientUsername" }
                                    },
                                    "run_list": [ "recipe[chef-client::config]" ]
                                },
                                "mode": "000644",
                                "owner": "root",
                                "group": "wheel"
                            },
                            "/etc/chef/roles.json": {
                                "content": {
                                    "mongodb": {
                                        "replicaset_name": { "Ref": "StackLabel" }
                                    },
                                    "run_list": [ "role[base]", "role[mongo_server]" ]
                                },
                                "mode": "000644",
                                "owner": "root",
                                "group": "wheel"
                            },
                            "/home/ubuntu/.s3cfg": {
                                "content": {
                                    "Fn::Join": [ "", [
                                        "[default]\n",
                                        "access_key = ", {
                                            "Ref": "HostKeys"
                                        }, "\n",
                                        "secret_key = ", { "Fn::GetAtt": ["HostKeys", "SecretAccessKey"]}, "\n",
                                        "use_https = True\n"
                                    ]]},
                                "mode": "000600",
                                "owner": "root",
                                "group": "wheel"
                            }
                        }
                    }
                }
            },
            "Properties" : {
                "InstanceType" : { "Ref" : "InstanceType" },
                "ImageId" : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" },
                    { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "InstanceType" }, "Arch" ] } ] },
                "SecurityGroups" : [ { "Ref" : "EC2SecurityGroup" } ],
                "KeyName" : { "Ref" : "KeyName" },
				"UserData" : {
                    "Fn::Base64" : {
                        "Fn::Join" : [
                            "",
                            [
                                "#!/bin/bash\n",

                                "## Error reporting helper function\n",
                                "function error_exit\n",
                                "{\n",
                                "   /usr/local/bin/cfn-signal -e 1 -r \"$1\" '", { "Ref" : "WaitHandleASG" }, "'\n",
                                "   exit 1\n",
                                "}\n\n",

                                "# cfn-init complains that the wheel group doesn't exist\n",
                                "groupadd wheel\n",
                                "usermod -a -G wheel root\n\n",

                                "gpg --keyserver pgpkeys.mit.edu --recv-key 40976EAF437D05B5\n",
                                "gpg -a --export 40976EAF437D05B5 | apt-key add -\n",
                                "apt-get update\n",
                                "apt-get -y install python-setuptools s3cmd\n",
                                "# srsly wtf?\n",
                                "apt-get -y --force-yes install ca-certificates=20111211\n",
                                "easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n\n",

                                "/usr/local/bin/cfn-init -s ", { "Ref" : "AWS::StackId" }, " -r LaunchConfig ",
                                " --access-key ", { "Ref" : "HostKeys" },
                                " --secret-key ", {"Fn::GetAtt": ["HostKeys", "SecretAccessKey"]},
                                " --region ", { "Ref" : "AWS::Region" }, " || error_exit 'Failed to initialize chef-solo through LaunchConfig'\n\n",

                                "# Bootstrap Chef\n",
                                "chef-solo -c /etc/chef/solo.rb -j /etc/chef/chef.json -r http://s3.amazonaws.com/chef-solo/bootstrap-latest.tar.gz >> /tmp/cfn-init.log 2>&1  || error_exit Failed to run chef-solo: $(</tmp/cfn-init.log)\n\n",

                                "# Fix up the server URL in client.rb\n",
                                "s3cmd -c /home/ubuntu/.s3cfg get s3://", { "Ref": "ChefServerPrivateKeyBucket" }, "/validation.pem /etc/chef/validation.pem >> /tmp/cfn-init.log 2>&1 || error_exit Failed to get Chef validation key: $(</tmp/cfn-init.log)\n\n",
                                "s3cmd -c /home/ubuntu/.s3cfg get s3://", { "Ref": "ChefServerPrivateKeyBucket" }, "/encrypted_data_bag_secret /etc/chef/encrypted_data_bag_secret >> /tmp/cfn-init.log 2>&1 || error_exit Failed to get data bag secret: $(</tmp/cfn-init.log)\n\n",
                                "chmod 0600 /etc/chef/encrypted_data_bag_secret\n",
                                "sed -i 's|http://localhost:4000|", { "Ref": "ChefServerURL" }, "|g' /etc/chef/client.rb\n\n",

                                "# Run chef-client\n",
                                "chef-client -E ", { "Ref" : "ChefEnvironment" }, " -j /etc/chef/roles.json >> /tmp/cfn-init.log 2>&1 || error_exit Failed to initialize host via chef-client: $(</tmp/cfn-init.log)\n\n",

                                "# We out.\n",
                                "status=$?\n",
                                "/usr/local/bin/cfn-signal -e $status '", { "Ref" : "WaitHandleASG" }, "'\n",
                                "echo /usr/local/bin/cfn-signal -e $status '", { "Ref" : "WaitHandleASG" }, "' >> /tmp/cfn-init.log 2>&1\n"
                            ]
                        ]
                    }
                }
            }
        },

        "WaitHandleASG" : {
            "Type" : "AWS::CloudFormation::WaitConditionHandle",
            "Properties" : {}
        },

        "WaitCondition" : {
            "Type" : "AWS::CloudFormation::WaitCondition",
            "DependsOn" : "AutoScalingGroup",
            "Properties" : {
                "Handle" : { "Ref" : "WaitHandleASG" },
                "Timeout" : "600"
            }
        }
    },

    "Outputs" : {
    }
}
