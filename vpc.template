{
    "AWSTemplateFormatVersion" : "2010-09-09",
    "Description" : "Template whikch creates a public and private subnet for a new environment with its required resources included NAT instance and Load Balancer with AppCookieStickinessPolicy",
    "Parameters" : {
        "InstanceType" : {
            "Description" : "NAT instance type",
            "Type" : "String",
            "Default" : "m1.small",
            "AllowedValues" : [ "t1.micro","m1.small","m1.medium","m1.large","m1.xlarge","m2.xlarge","m2.2xlarge","m2.4xlarge","m3.xlarge","m3.2xlarge","c1.medium","c1.xlarge","cc1.4xlarge","cc2.8xlarge","cg1.4xlarge"],
            "ConstraintDescription" : "must be a valid EC2 instance type."
        },
        "KeyName" : {
            "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the NAT instance",
            "Type" : "String"
        }
    },
    "Mappings" : {
        "AWSInstanceType2Arch" : {
            "t1.micro"    : { "Arch" : "32" },
            "m1.small"    : { "Arch" : "64" },
            "m1.medium"   : { "Arch" : "64" },
            "m1.large"    : { "Arch" : "64" },
            "m1.xlarge"   : { "Arch" : "64" },
            "m2.xlarge"   : { "Arch" : "64" },
            "m2.2xlarge"  : { "Arch" : "64" },
            "m2.4xlarge"  : { "Arch" : "64" },
            "m3.xlarge"   : { "Arch" : "64" },
            "m3.2xlarge"  : { "Arch" : "64" },
            "c1.medium"   : { "Arch" : "64" },
            "c1.xlarge"   : { "Arch" : "64" }
        },
        "AWSRegionArch2NATAMI" : {
            "us-east-1" : {
                "32" : "ami-2e1bc047",
                "64" : "ami-f619c29f"
            },
            "us-west-2" : {
                "32" : "ami-6eff725e",
                "64" : "ami-52ff7262"
            }
        },
        "AWSRegion2VPCCIDRBlocks" : {
            "us-east-1" : {
                "Block" : "172.20.0.0/16",
                "Public" : "172.20.0.0/20",
                "Private" : "172.20.240.0/20"
            },
            "us-west-2" : {
                "Block" : "172.24.0.0/16",
                "Public" : "172.24.0.0/20",
                "Private" : "172.24.240.0/20"
            }
        }
    },
    "Resources" : {
        "VPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": {
                    "Fn::FindInMap": [ "AWSRegion2VPCCIDRBlocks", {
                        "Ref": "AWS::Region"
                    }, "Block" ]
                }
            }
        },
        "VPCInternetGateway": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": { }
        },
        "VPCInternetGatewayAttachment": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "InternetGatewayId": {
                    "Ref": "VPCInternetGateway"
                },
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "NetworkAcl": {
            "Type": "AWS::EC2::NetworkAcl",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "NetworkAclAllowEgress": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "CidrBlock": "0.0.0.0/24",
                "Egress": "true",
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                },
                "Protocol": "-1",
                "RuleAction": "allow",
                "RuleNumber": "100"
            }
        },
        "NetworkAclDenyEgress": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "CidrBlock": "0.0.0.0/24",
                "Egress": "true",
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                },
                "Protocol": "-1",
                "RuleAction": "deny",
                "RuleNumber": "32766"
            }
        },
        "NetworkAclAllowIngress": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "CidrBlock": "0.0.0.0/24",
                "Egress": "false",
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                },
                "Protocol": "-1",
                "RuleAction": "allow",
                "RuleNumber": "100"
            }
        },
        "NetworkAclDenyIngress": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "CidrBlock": "0.0.0.0/24",
                "Egress": "false",
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                },
                "Protocol": "-1",
                "RuleAction": "deny",
                "RuleNumber": "32766"
            }
        },
        "VPCPublicSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enable instance-to-instance access in the public subnet",
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "VPCPrivateSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enable instance-to-instance access in the private subnet",
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "VPCNATSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enable internal access to the NAT device",
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "VPCPublicSecurityGroupIngress": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": { "Fn::GetAtt": [ "VPCPublicSecurityGroup", "GroupId" ] },
                "IpProtocol": "-1",
                "FromPort": "-1",
                "ToPort": "-1",
                "SourceSecurityGroupId": { "Fn::GetAtt": [ "VPCPublicSecurityGroup", "GroupId" ] }
            }
        },
        "VPCPublicSecurityGroupEgress": {
            "Type": "AWS::EC2::SecurityGroupEgress",
            "Properties": {
                "GroupId": { "Fn::GetAtt": [ "VPCPublicSecurityGroup", "GroupId" ] },
                "IpProtocol": "-1",
                "FromPort": "-1",
                "ToPort": "-1",
                "DestinationSecurityGroupId": { "Fn::GetAtt": [ "VPCPublicSecurityGroup", "GroupId" ] }
            }
        },
        "VPCPrivateSecurityGroupIngress": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": { "Fn::GetAtt": [ "VPCPrivateSecurityGroup", "GroupId" ] },
                "IpProtocol": "-1",
                "FromPort": "-1",
                "ToPort": "-1",
                "SourceSecurityGroupId": { "Fn::GetAtt": [ "VPCPrivateSecurityGroup", "GroupId" ] }
            }
        },
        "VPCPrivateSecurityGroupEgress": {
            "Type": "AWS::EC2::SecurityGroupEgress",
            "Properties": {
                "GroupId": { "Fn::GetAtt": [ "VPCPrivateSecurityGroup", "GroupId" ] },
                "IpProtocol": "-1",
                "FromPort": "-1",
                "ToPort": "-1",
                "DestinationSecurityGroupId": { "Fn::GetAtt": [ "VPCPrivateSecurityGroup", "GroupId" ] }
            }
        },
        "VPCPrivateSecurityGroupIngressAllowSSHFromPublic": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": { "Fn::GetAtt": [ "VPCPrivateSecurityGroup", "GroupId" ] },
                "IpProtocol": "tcp",
                "FromPort": "22",
                "ToPort": "22",
                "SourceSecurityGroupId": { "Fn::GetAtt": [ "VPCPublicSecurityGroup", "GroupId" ] }
            }
        },
        "VPCPrivateSecurityGroupIngressAllowAllFromNAT": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": { "Fn::GetAtt": [ "VPCPrivateSecurityGroup", "GroupId" ] },
                "IpProtocol": "-1",
                "FromPort": "-1",
                "ToPort": "-1",
                "SourceSecurityGroupId": { "Fn::GetAtt": [ "VPCNATSecurityGroup", "GroupId" ] }
            }
        },
        "VPCPrivateSecurityGroupEgressAllowAllToNAT": {
            "Type": "AWS::EC2::SecurityGroupEgress",
            "Properties": {
                "GroupId": { "Fn::GetAtt": [ "VPCPrivateSecurityGroup", "GroupId" ] },
                "IpProtocol": "-1",
                "FromPort": "-1",
                "ToPort": "-1",
                "DestinationSecurityGroupId": { "Fn::GetAtt": [ "VPCNATSecurityGroup", "GroupId" ] }
            }
        },
        "VPCNATSecurityGroupIngress": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": { "Fn::GetAtt": [ "VPCNATSecurityGroup", "GroupId" ] },
                "IpProtocol": "-1",
                "FromPort": "-1",
                "ToPort": "-1",
                "SourceSecurityGroupId": { "Fn::GetAtt": [ "VPCPrivateSecurityGroup", "GroupId" ] }
            }
        },
        "VPCNATSecurityGroupEgress": {
            "Type": "AWS::EC2::SecurityGroupEgress",
            "Properties": {
                "GroupId": { "Fn::GetAtt": [ "VPCNATSecurityGroup", "GroupId" ] },
                "IpProtocol": "-1",
                "FromPort": "-1",
                "ToPort": "-1",
                "DestinationSecurityGroupId": { "Fn::GetAtt": [ "VPCPrivateSecurityGroup", "GroupId" ] }
            }
        },
        "PublicSubnetRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "PublicSubnetDefaultRoute": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "VPCInternetGateway"
                },
                "RouteTableId": { "Ref": "PublicSubnetRouteTable" }
            }
        },
        "PublicSubnet": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": {
                    "Fn::FindInMap": [ "AWSRegion2VPCCIDRBlocks", {
                        "Ref": "AWS::Region"
                    }, "Public" ]
                }
            }
        },
        "PublicSubnetRouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PublicSubnet"
                },
                "RouteTableId": {
                    "Ref": "PublicSubnetRouteTable"
                }
            }
        },
        "PublicSubnetNetworkAclAssociation": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PublicSubnet"
                },
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                }
            }
        },
        "NATDevice": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "SubnetId": {
                    "Ref": "PublicSubnet"
                },
                "SourceDestCheck": "false",
                "ImageId": {
                    "Fn::FindInMap": [ "AWSRegionArch2NATAMI", {
                        "Ref": "AWS::Region"
                    },
                        {
                            "Fn::FindInMap": [ "AWSInstanceType2Arch", {
                                "Ref": "InstanceType"
                            }, "Arch" ]
                        } ]
                },
                "SecurityGroupIds": [
                    {
                        "Ref": "VPCNATSecurityGroup"
                    }
                ]
            }
        },
        "NATIPAddress": {
            "Type": "AWS::EC2::EIP",
            "Properties": {
                "Domain": "vpc",
                "InstanceId": {
                    "Ref": "NATDevice"
                }
            }
        },

        "NATDeviceIPAddressAssociation" : {
            "Type" : "AWS::EC2::EIPAssociation",
            "DependsOn" : "NATDevice",
            "Properties" : {
                "AllocationId" : { "Fn::GetAtt" : [ "NATIPAddress" , "AllocationId" ] },
                "InstanceId" : { "Ref" : "NATDevice" }
            }
        },
        "PrivateSubnetRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "PrivateSubnetDefaultRoute": {
            "DependsOn" : "NATDeviceIPAddressAssociation",
            "Type": "AWS::EC2::Route",
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0",
                "InstanceId": {
                    "Ref": "NATDevice"
                },
                "RouteTableId": { "Ref": "PrivateSubnetRouteTable" }
            }
        },
        "PrivateSubnet": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": {
                    "Fn::FindInMap": [ "AWSRegion2VPCCIDRBlocks", {
                        "Ref": "AWS::Region"
                    }, "Private" ]
                }
            }
        },
        "PrivateSubnetRouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PrivateSubnet"
                },
                "RouteTableId": {
                    "Ref": "PrivateSubnetRouteTable"
                }
            }
        },
        "PrivateSubnetNetworkAclAssociation": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PrivateSubnet"
                },
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                }
            }
        }
    }
}
