{
    "AWSTemplateFormatVersion" : "2010-09-09",
    "Description" : "/16 VPC with private and public /20 subnets, a NAT instance, an instance running OpenVPN, and an Internet Gateway",
    "Parameters" : {
        "InstanceType" : {
            "Description" : "NAT instance type",
            "Type" : "String",
            "Default" : "m1.small",
            "AllowedValues" : [ "t1.micro","m1.small","m1.medium","m1.large","m1.xlarge","m2.xlarge","m2.2xlarge","m2.4xlarge","m3.xlarge","m3.2xlarge","c1.medium","c1.xlarge","cc1.4xlarge","cc2.8xlarge","cg1.4xlarge"],
            "ConstraintDescription" : "must be a valid EC2 instance type."
        },
        "AllowedSSHCidrBlock" : {
            "Description": "CIDR block from which to allow SSH",
            "Type": "String",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "Default": "0.0.0.0/0"
        },
        "KeyName" : {
            "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the NAT and VPN instances",
            "Type" : "String",
            "AllowedPattern" : "[\\x20-\\x7E]*",
            "Default": "indigo-biosystems"
        },
        "ChefServerURL" : {
            "Description" : "URL of Chef Server",
            "Type" : "String",
            "Default": "https://api.opscode.com/organizations/product_dev",
            "AllowedPattern" : "[\\x20-\\x7E]*",
            "ConstraintDescription" : "can only contain ASCII characters"
        },
        "ChefServerPrivateKeyBucket" : {
            "Description" : "S3 bucket containing validation key for Chef Server",
            "Type" : "String",
            "Default" : "ascent-chef-us-west-2",
            "AllowedPattern" : "[\\x20-\\x7E]*",
            "ConstraintDescription" : "can only contain ASCII characters"
        },
        "ChefValidationClientUsername" : {
            "Description" : "Chef validation client username",
            "Type" : "String",
            "Default" : "product_dev-validator",
            "AllowedPattern" : "[\\x20-\\x7E]*",
            "ConstraintDescription" : "can only contain ASCII characters"
        },
        "ChefEnvironment" : {
            "Description" : "Chef Environment",
            "Type" : "String",
            "Default" : "dr",
            "AllowedPattern" : "[\\x20-\\x7E]*",
            "ConstraintDescription" : "can only contain ASCII characters"
        },
        "RemoteNetwork" : {
            "Description": "CIDR block of remote network to connect through VPN",
            "Type": "String",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
        },
        "VPCName" : {
            "Description": "Name of the VPC",
            "Type": "String",
            "Default" : "dr-vpc",
            "AllowedPattern" : "[\\x20-\\x7E]*"
        }
    },
    "Mappings" : {
        "AWSInstanceType2Arch" : {
            "t1.micro"    : { "Arch" : "32" },
            "m1.small"    : { "Arch" : "64" },
            "m1.medium"   : { "Arch" : "64" },
            "m1.large"    : { "Arch" : "64" },
            "m1.xlarge"   : { "Arch" : "64" },
            "m2.xlarge"   : { "Arch" : "64" },
            "m2.2xlarge"  : { "Arch" : "64" },
            "m2.4xlarge"  : { "Arch" : "64" },
            "m3.xlarge"   : { "Arch" : "64" },
            "m3.2xlarge"  : { "Arch" : "64" },
            "c1.medium"   : { "Arch" : "64" },
            "c1.xlarge"   : { "Arch" : "64" }
        },
        "AWSRegionArch2NATAMI" : {
            "us-east-1" : {
                "32" : "ami-2e1bc047",
                "64" : "ami-f619c29f"
            },
            "us-west-2" : {
                "32" : "ami-6eff725e",
                "64" : "ami-52ff7262"
            }
        },
        "AWSRegionArch2VPNAMI" : {
            "us-east-1"      : { "64" : "ami-24498a4c" },
            "us-west-2"      : { "64" : "ami-2da7d41d" }
        },
        "AWSRegion2VPCCIDRBlocks" : {
            "us-east-1" : { "Block" : "172.20.0.0/16" },
            "us-west-2" : { "Block" : "172.24.0.0/16" }
        },
        "AZ2PublicSubnet" : {
            "us-east-1": {
                "AZ1": "172.20.0.0/20",
                "AZ2": "172.20.16.0/20",
                "AZ3": "172.20.32.0/20",
                "AZ4": "172.20.48.0/20",
                "AZ5": "172.20.64.0/20"
            },
            "us-west-2": {
                "AZ1": "172.24.0.0/20",
                "AZ2": "172.24.16.0/20",
                "AZ3": "172.24.32.0/20",
                "AZ4": "172.24.48.0/20",
                "AZ5": "172.24.64.0/20"
            }
        },
        "AZ2PrivateSubnet" : {
            "us-east-1": {
                "AZ1": "172.20.240.0/20",
                "AZ2": "172.20.224.0/20",
                "AZ3": "172.20.208.0/20",
                "AZ4": "172.20.192.0/20",
                "AZ5": "172.20.176.0/20"
            },
            "us-west-2": {
                "AZ1": "172.24.240.0/20",
                "AZ2": "172.24.224.0/20",
                "AZ3": "172.24.208.0/20",
                "AZ4": "172.24.192.0/20",
                "AZ5": "172.24.176.0/20"
            }
        },
        "RegionZoneMap" : {
            "us-east-1" : {"AZ1" : "us-east-1a", "AZ2" : "us-east-1b", "AZ3" : "us-east-1c", "AZ4" : "us-east-1d", "AZ5" : "us-east-1e"},
            "us-west-2" : {"AZ1" : "us-west-2a", "AZ2" : "us-west-2b", "AZ3" : "us-west-2c", "AZ4" : "us-west-2b", "AZ5" : "us-west-2c"}
        }
    },

    "Resources" : {
        "CfnUser" : {
            "Type" : "AWS::IAM::User",
            "Properties" : {
                "Path": "/",
                "Policies": [{
                    "PolicyName": "root",
                    "PolicyDocument": { "Statement":[{
                        "Effect":"Allow",
                        "Action": [
                            "cloudformation:DescribeStackResource",
                            "cloudformation:DescribeStacks",
                            "cloudformation:DescribeStackEvents",
                            "cloudformation:GetTemplate",
                            "cloudformation:ValidateTemplate",
                            "s3:Get"
                        ],
                        "Resource":"*"
                    }]}
                }]
            }
        },
        "BucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
                "PolicyDocument": {
                    "Version": "2008-10-17",
                    "Id": "ReadPolicy",
                    "Statement": [{
                        "Sid": "ReadAccess",
                        "Action": [ "s3:GetObject" ],
                        "Effect": "Allow",
                        "Resource": { "Fn::Join": [ "", ["arn:aws:s3:::", { "Ref": "ChefServerPrivateKeyBucket" }, "/*"]] },
                        "Principal": { "AWS": { "Fn::GetAtt": ["CfnUser", "Arn"] } }
                    }]
                },
                "Bucket": { "Ref": "ChefServerPrivateKeyBucket" }
            }
        },
        "HostKeys" : {
            "Type" : "AWS::IAM::AccessKey",
            "Properties" : {
                "UserName" : {"Ref": "CfnUser"}
            }
        },
        "VPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": {
                    "Fn::FindInMap": [ "AWSRegion2VPCCIDRBlocks", {
                        "Ref": "AWS::Region"
                    }, "Block" ]
                },
                "EnableDnsHostnames": "true",
                "EnableDnsSupport": "true",
                "Tags": [
                    { "Key": "Name", "Value": {
                        "Fn::Join": [ "-", [
                            "indigo",
                            { "Ref" : "AWS::Region" },
                            { "Ref" : "VPCName" }
                        ]]
                    }}
                ]
            }
        },
        "VPCInternetGateway": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": { }
        },
        "VPCInternetGatewayAttachment": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "InternetGatewayId": {
                    "Ref": "VPCInternetGateway"
                },
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "VPCPublicSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enable instance-to-instance access in the public subnet",
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "VPCPrivateSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enable instance-to-instance access in the private subnet",
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "VPCNATSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enable internal access to the NAT device",
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "VPCSSHSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enable public SSH access from a specified CIDR block",
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "VPCOpenVPNSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enable UDP/1194 to the VPN device",
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "VPCPublicSecurityGroupIngress": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": { "Fn::GetAtt": [ "VPCPublicSecurityGroup", "GroupId" ] },
                "IpProtocol": "-1",
                "FromPort": "-1",
                "ToPort": "-1",
                "SourceSecurityGroupId": { "Fn::GetAtt": [ "VPCPublicSecurityGroup", "GroupId" ] }
            }
        },
        "VPCPublicSecurityGroupIngressAllowAllFromRemoteCIDRBlock": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Fn::GetAtt": [ "VPCPublicSecurityGroup", "GroupId" ]
                },
                "IpProtocol": "-1",
                "FromPort": "-1",
                "ToPort": "-1",
                "CidrIp": {
                    "Ref": "RemoteNetwork"
                }
            }
        },
        "VPCPublicSecurityGroupEgress": {
            "Type": "AWS::EC2::SecurityGroupEgress",
            "Properties": {
                "GroupId": { "Fn::GetAtt": [ "VPCPublicSecurityGroup", "GroupId" ] },
                "IpProtocol": "-1",
                "FromPort": "-1",
                "ToPort": "-1",
                "DestinationSecurityGroupId": { "Fn::GetAtt": [ "VPCPublicSecurityGroup", "GroupId" ] }
            }
        },
        "VPCPrivateSecurityGroupIngress": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": { "Fn::GetAtt": [ "VPCPrivateSecurityGroup", "GroupId" ] },
                "IpProtocol": "-1",
                "FromPort": "-1",
                "ToPort": "-1",
                "SourceSecurityGroupId": { "Fn::GetAtt": [ "VPCPrivateSecurityGroup", "GroupId" ] }
            }
        },
        "VPCPrivateSecurityGroupEgress": {
            "Type": "AWS::EC2::SecurityGroupEgress",
            "Properties": {
                "GroupId": { "Fn::GetAtt": [ "VPCPrivateSecurityGroup", "GroupId" ] },
                "IpProtocol": "-1",
                "FromPort": "-1",
                "ToPort": "-1",
                "DestinationSecurityGroupId": { "Fn::GetAtt": [ "VPCPrivateSecurityGroup", "GroupId" ] }
            }
        },
        "VPCPrivateSecurityGroupIngressAllowSSHFromPublic": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": { "Fn::GetAtt": [ "VPCPrivateSecurityGroup", "GroupId" ] },
                "IpProtocol": "tcp",
                "FromPort": "22",
                "ToPort": "22",
                "SourceSecurityGroupId": { "Fn::GetAtt": [ "VPCPublicSecurityGroup", "GroupId" ] }
            }
        },
        "VPCPrivateSecurityGroupIngressAllowAllFromNAT": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": { "Fn::GetAtt": [ "VPCPrivateSecurityGroup", "GroupId" ] },
                "IpProtocol": "-1",
                "FromPort": "-1",
                "ToPort": "-1",
                "SourceSecurityGroupId": { "Fn::GetAtt": [ "VPCNATSecurityGroup", "GroupId" ] }
            }
        },
        "VPCPrivateSecurityGroupIngressAllowAllFromOpenVPN": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": { "Fn::GetAtt": [ "VPCPrivateSecurityGroup", "GroupId" ] },
                "IpProtocol": "-1",
                "FromPort": "-1",
                "ToPort": "-1",
                "SourceSecurityGroupId": { "Fn::GetAtt": [ "VPCOpenVPNSecurityGroup", "GroupId" ] }
            }
        },
        "VPCPrivateSecurityGroupIngressAllowAllFromRemoteCIDRBlock": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Fn::GetAtt": [ "VPCPrivateSecurityGroup", "GroupId" ]
                },
                "IpProtocol": "-1",
                "FromPort": "-1",
                "ToPort": "-1",
                "CidrIp": {
                    "Ref": "RemoteNetwork"
                }
            }
        },
        "VPCPrivateSecurityGroupEgressAllowAllToNAT": {
            "Type": "AWS::EC2::SecurityGroupEgress",
            "Properties": {
                "GroupId": { "Fn::GetAtt": [ "VPCPrivateSecurityGroup", "GroupId" ] },
                "IpProtocol": "-1",
                "FromPort": "-1",
                "ToPort": "-1",
                "DestinationSecurityGroupId": { "Fn::GetAtt": [ "VPCNATSecurityGroup", "GroupId" ] }
            }
        },
        "VPCPrivateSecurityGroupEgressAllowAllToOpenVPN": {
            "Type": "AWS::EC2::SecurityGroupEgress",
            "Properties": {
                "GroupId": { "Fn::GetAtt": [ "VPCPrivateSecurityGroup", "GroupId" ] },
                "IpProtocol": "-1",
                "FromPort": "-1",
                "ToPort": "-1",
                "DestinationSecurityGroupId": { "Fn::GetAtt": [ "VPCOpenVPNSecurityGroup", "GroupId" ] }
            }
        },
        "VPCPrivateSecurityGroupEgressAllowAllToRemoteCIDRBlock": {
            "Type": "AWS::EC2::SecurityGroupEgress",
            "Properties": {
                "GroupId": { "Fn::GetAtt": [ "VPCPrivateSecurityGroup", "GroupId" ] },
                "IpProtocol": "-1",
                "FromPort": "-1",
                "ToPort": "-1",
                "CidrIp": {
                    "Ref": "RemoteNetwork"
                }
            }
        },
        "VPCNATSecurityGroupIngress": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": { "Fn::GetAtt": [ "VPCNATSecurityGroup", "GroupId" ] },
                "IpProtocol": "-1",
                "FromPort": "-1",
                "ToPort": "-1",
                "SourceSecurityGroupId": { "Fn::GetAtt": [ "VPCPrivateSecurityGroup", "GroupId" ] }
            }
        },
        "VPCNATSecurityGroupAllowAllToPrivateEgress": {
            "Type": "AWS::EC2::SecurityGroupEgress",
            "Properties": {
                "GroupId": { "Fn::GetAtt": [ "VPCNATSecurityGroup", "GroupId" ] },
                "IpProtocol": "-1",
                "FromPort": "-1",
                "ToPort": "-1",
                "DestinationSecurityGroupId": { "Fn::GetAtt": [ "VPCPrivateSecurityGroup", "GroupId" ] }
            }
        },
        "VPCNATSecurityGroupAllowAllToInternetEgress" : {
            "Type": "AWS::EC2::SecurityGroupEgress",
            "Properties": {
                "GroupId": { "Fn::GetAtt": [ "VPCNATSecurityGroup", "GroupId" ] },
                "IpProtocol": "-1",
                "FromPort": "-1",
                "ToPort": "-1",
                "CidrIp": "0.0.0.0/0"
            }
        },
        "VPCSSHSecurityGroupAllowFromCidrBlockIngress" : {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": { "Fn::GetAtt": [ "VPCSSHSecurityGroup", "GroupId" ] },
                "IpProtocol": "tcp",
                "FromPort": "22",
                "ToPort": "22",
                "CidrIp": { "Ref": "AllowedSSHCidrBlock" }
            }
        },
        "VPCOpenVPNSecurityGroupAllowUDP1194" : {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": { "Fn::GetAtt": [ "VPCOpenVPNSecurityGroup", "GroupId"] },
                "IpProtocol": "udp",
                "FromPort": "1194",
                "ToPort": "1194",
                "CidrIp": "0.0.0.0/0"
            }
        },
        "VPCOpenVPNSecurityGroupIngressAllowAllFromPrivate": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": { "Fn::GetAtt": [ "VPCOpenVPNSecurityGroup", "GroupId" ] },
                "IpProtocol": "-1",
                "FromPort": "-1",
                "ToPort": "-1",
                "SourceSecurityGroupId": { "Fn::GetAtt": [ "VPCPrivateSecurityGroup", "GroupId" ] }
            }
        },
        "PublicSubnetRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "PublicSubnetDefaultRoute": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "VPCInternetGateway"
                },
                "RouteTableId": { "Ref": "PublicSubnetRouteTable" }
            }
        },
        "PublicSubnet1": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "AvailabilityZone": { "Fn::FindInMap": [ "RegionZoneMap", { "Ref": "AWS::Region" }, "AZ1" ] },
                "CidrBlock": {
                    "Fn::FindInMap": [ "AZ2PublicSubnet", { "Ref": "AWS::Region" }, "AZ1" ]
                },
                "Tags": [
                    { "Key": "Name", "Value": {
                        "Fn::Join": [ "-", [
                            "indigo",
                            { "Ref" : "VPCName" },
                            "public",
                            { "Fn::FindInMap": [ "RegionZoneMap", { "Ref": "AWS::Region" }, "AZ1" ] }
                        ]]
                    }}
                ]
            }
        },
        "PublicSubnet2": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "AvailabilityZone": { "Fn::FindInMap": [ "RegionZoneMap", { "Ref": "AWS::Region" }, "AZ2" ] },
                "CidrBlock": {
                    "Fn::FindInMap": [ "AZ2PublicSubnet", { "Ref": "AWS::Region" }, "AZ2" ]
                },
                "Tags": [
                    { "Key": "Name", "Value": {
                        "Fn::Join": [ "-", [
                            "indigo",
                            { "Ref" : "VPCName" },
                            "public",
                            { "Fn::FindInMap": [ "RegionZoneMap", { "Ref": "AWS::Region" }, "AZ2" ] }
                        ]]
                    }}
                ]
            }
        },
        "PublicSubnet3": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "AvailabilityZone": { "Fn::FindInMap": [ "RegionZoneMap", { "Ref": "AWS::Region" }, "AZ3" ] },
                "CidrBlock": {
                    "Fn::FindInMap": [ "AZ2PublicSubnet", { "Ref": "AWS::Region" }, "AZ3" ]
                },
                "Tags": [
                    { "Key": "Name", "Value": {
                        "Fn::Join": [ "-", [
                            "indigo",
                            { "Ref" : "VPCName" },
                            "public",
                            { "Fn::FindInMap": [ "RegionZoneMap", { "Ref": "AWS::Region" }, "AZ3" ] }
                        ]]
                    }}
                ]
            }
        },
        "PublicSubnet1RouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PublicSubnet1"
                },
                "RouteTableId": {
                    "Ref": "PublicSubnetRouteTable"
                }
            }
        },
        "PublicSubnet2RouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PublicSubnet2"
                },
                "RouteTableId": {
                    "Ref": "PublicSubnetRouteTable"
                }
            }
        },
        "PublicSubnet3RouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PublicSubnet3"
                },
                "RouteTableId": {
                    "Ref": "PublicSubnetRouteTable"
                }
            }
        },
        "NATDevice": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "SubnetId": {
                    "Ref": "PublicSubnet2"
                },
                "SourceDestCheck": "false",
                "ImageId": {
                    "Fn::FindInMap": [ "AWSRegionArch2NATAMI", {
                        "Ref": "AWS::Region"
                    },
                        {
                            "Fn::FindInMap": [ "AWSInstanceType2Arch", {
                                "Ref": "InstanceType"
                            }, "Arch" ]
                        } ]
                },
                "SecurityGroupIds": [
                    {
                        "Ref": "VPCNATSecurityGroup"
                    }
                ],
                "Tags": [
                    { "Key": "Name", "Value": {
                        "Fn::Join": [ "-", [
                            "indigo",
                            { "Ref" : "AWS::Region" },
                            { "Ref" : "VPCName" },
                            "NAT"
                        ]]
                    }}
                ]
            }
        },
        "OpenVPNDevice": {
            "Type": "AWS::EC2::Instance",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "config": {
                        "files": {
                            "/etc/chef/node.json": {
                                "content": {
                                    "run_list": [  ]
                                },
                                "mode": "000644",
                                "owner": "root",
                                "group": "wheel"
                            },
                            "/etc/chef/chef.json": {
                                "content": {
                                    "chef_client": {
                                        "server_url": { "Ref": "ChefServerURL" },
                                        "validation_client_name": { "Ref": "ChefValidationClientUsername" }
                                    },
                                    "run_list": [ "recipe[chef-client::config]" ]
                                },
                                "mode": "000644",
                                "owner": "root",
                                "group": "wheel"
                            },
                            "/etc/chef/solo.rb": {
                                "content": {
                                    "Fn::Join": [
                                        "", [
                                            "log_level :info\n",
                                            "log_location STDOUT\n",
                                            "file_cache_path \"/var/chef-solo\"\n",
                                            "cookbook_path \"/var/chef-solo/cookbooks\"\n",
                                            "json_attribs \"/etc/chef/node.json\"\n",
                                            "recipe_url \"https://s3.amazonaws.com/gswallow-cfn-templates-us-east-1/bootstrap-latest.tar.gz\"\n"
                                        ]
                                    ]
                                },
                                "mode": "000644",
                                "owner": "root",
                                "group": "wheel"
                            },
                            "/etc/chef/roles.json": {
                                "content": {
                                    "run_list": [ "role[base]", {
                                        "Fn::Join": [
                                            "", [
                                                "role[",
                                                {
                                                    "Fn::Join": [ "_", [ "vpn", {
                                                        "Ref": "AWS::Region"
                                                    } ] ]
                                                },
                                                "]"
                                            ]
                                        ]
                                    } ]
                                },
                                "mode": "000644",
                                "owner": "root",
                                "group": "wheel"
                            },
                            "/home/ubuntu/.s3cfg": {
                                "content": {
                                    "Fn::Join": [ "", [
                                        "[default]\n",
                                        "access_key = ", {
                                            "Ref": "HostKeys"
                                        }, "\n",
                                        "secret_key = ", { "Fn::GetAtt": ["HostKeys", "SecretAccessKey"]}, "\n",
                                        "use_https = True\n"
                                    ]]},
                                "mode": "000600",
                                "owner": "root",
                                "group": "wheel"
                            }
                        }
                    }
                }
            },
            "Properties" : {
                "InstanceType" : { "Ref" : "InstanceType" },
                "ImageId" : { "Fn::FindInMap" : [ "AWSRegionArch2VPNAMI", { "Ref" : "AWS::Region" },
                    { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "InstanceType" }, "Arch" ] } ] },
                "SecurityGroupIds" : [
                    { "Ref" : "VPCOpenVPNSecurityGroup" },
                    { "Ref" : "VPCPublicSecurityGroup" },
                    { "Ref" : "VPCSSHSecurityGroup" }
                ],
                "SourceDestCheck": "false",
                "SubnetId" : { "Ref" : "PublicSubnet2" },
                "KeyName" : { "Ref" : "KeyName" },
                "UserData" : {
                    "Fn::Base64" : {
                        "Fn::Join" : [
                            "",
                            [
                                "#!/bin/bash\n",

                                "## Error reporting helper function\n",
                                "function error_exit\n",
                                "{\n",
                                "   /usr/local/bin/cfn-signal -e 1 -r \"$1\" '", { "Ref" : "WaitHandleOpenVPNDevice" }, "'\n",
                                "   exit 1\n",
                                "}\n\n",

                                "# cfn-init complains that the wheel group doesn't exist\n",
                                "groupadd wheel\n",
                                "usermod -a -G wheel root\n\n",

                                "gpg --keyserver pgpkeys.mit.edu --recv-key 40976EAF437D05B5\n",
                                "gpg -a --export 40976EAF437D05B5 | apt-key add -\n",
                                "apt-get update\n",
                                "apt-get -y install python-setuptools s3cmd\n",
                                "# srsly wtf?\n",
                                "apt-get -y --force-yes install ca-certificates=20111211\n",
                                "easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n\n",

                                "/usr/local/bin/cfn-init -s ", { "Ref" : "AWS::StackName" }, " -r OpenVPNDevice ",
                                " --access-key ", { "Ref" : "HostKeys" },
                                " --secret-key ", {"Fn::GetAtt": ["HostKeys", "SecretAccessKey"]},
                                " --region ", { "Ref" : "AWS::Region" }, " || error_exit 'Failed to initialize chef-solo through LaunchConfig'\n\n",

                                "# Bootstrap Chef\n",
                                "chef-solo -c /etc/chef/solo.rb -j /etc/chef/chef.json -r http://s3.amazonaws.com/chef-solo/bootstrap-latest.tar.gz >> /tmp/cfn-init.log 2>&1  || error_exit Failed to run chef-solo: $(</tmp/cfn-init.log)\n\n",

                                "# Fix up the server URL in client.rb\n",
                                "s3cmd -c /home/ubuntu/.s3cfg get s3://", { "Ref": "ChefServerPrivateKeyBucket" }, "/validation.pem /etc/chef/validation.pem >> /tmp/cfn-init.log 2>&1 || error_exit Failed to get Chef validation key: $(</tmp/cfn-init.log)\n\n",
                                "s3cmd -c /home/ubuntu/.s3cfg get s3://", { "Ref": "ChefServerPrivateKeyBucket" }, "/encrypted_data_bag_secret /etc/chef/encrypted_data_bag_secret >> /tmp/cfn-init.log 2>&1 || error_exit Failed to get data bag secret: $(</tmp/cfn-init.log)\n\n",
                                "chmod 0600 /etc/chef/encrypted_data_bag_secret\n",
                                "sed -i 's|http://localhost:4000|", { "Ref": "ChefServerURL" }, "|g' /etc/chef/client.rb\n\n",

                                "# Run chef-client\n",
                                "chef-client -E ", { "Ref" : "ChefEnvironment" }, " -j /etc/chef/roles.json >> /tmp/cfn-init.log 2>&1 || error_exit Failed to initialize host via chef-client: $(</tmp/cfn-init.log)\n\n",

                                "# We out.\n",
                                "status=$?\n",
                                "/usr/local/bin/cfn-signal -e $status '", { "Ref" : "WaitHandleOpenVPNDevice" }, "'\n",
                                "echo /usr/local/bin/cfn-signal -e $status '", { "Ref" : "WaitHandleOpenVPNDevice" }, "' >> /tmp/cfn-init.log 2>&1\n"
                            ]
                        ]
                    }
                },
                "Tags": [
                    { "Key": "Name", "Value": {
                        "Fn::Join": [ "-", [
                            "indigo",
                            { "Ref" : "AWS::Region" },
                            { "Ref" : "VPCName" },
                            "VPN"
                        ]]
                    }}
                ]
            }
        },
        "NATIPAddress": {
            "Type": "AWS::EC2::EIP",
            "Properties": {
                "Domain": "vpc",
                "InstanceId": {
                    "Ref": "NATDevice"
                }
            }
        },

        "NATDeviceIPAddressAssociation" : {
            "Type" : "AWS::EC2::EIPAssociation",
            "DependsOn" : "NATDevice",
            "Properties" : {
                "AllocationId" : { "Fn::GetAtt" : [ "NATIPAddress" , "AllocationId" ] },
                "InstanceId" : { "Ref" : "NATDevice" }
            }
        },

        "OpenVPNIPAddress": {
            "Type": "AWS::EC2::EIP",
            "Properties": {
                "Domain": "vpc",
                "InstanceId": {
                    "Ref": "OpenVPNDevice"
                }
            }
        },

        "OpenVPNDeviceIPAddressAssociation" : {
            "Type" : "AWS::EC2::EIPAssociation",
            "DependsOn" : "OpenVPNDevice",
            "Properties" : {
                "AllocationId" : { "Fn::GetAtt" : [ "OpenVPNIPAddress" , "AllocationId" ] },
                "InstanceId" : { "Ref" : "OpenVPNDevice" }
            }
        },

        "PrivateSubnetRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "PrivateSubnetDefaultRoute": {
            "DependsOn" : "NATDeviceIPAddressAssociation",
            "Type": "AWS::EC2::Route",
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0",
                "InstanceId": {
                    "Ref": "NATDevice"
                },
                "RouteTableId": { "Ref": "PrivateSubnetRouteTable" }
            }
        },
        "PublicRouteToRemoteSubnet": {
            "DependsOn": "OpenVPNDeviceIPAddressAssociation",
            "Type": "AWS::EC2::Route",
            "Properties": {
                "DestinationCidrBlock": { "Ref": "RemoteNetwork" },
                "InstanceId": { "Ref": "OpenVPNDevice" },
                "RouteTableId": { "Ref": "PublicSubnetRouteTable" }
            }
        },
        "PrivateRouteToRemoteSubnet": {
            "DependsOn": "OpenVPNDeviceIPAddressAssociation",
            "Type": "AWS::EC2::Route",
            "Properties": {
                "DestinationCidrBlock": { "Ref": "RemoteNetwork" },
                "InstanceId": { "Ref": "OpenVPNDevice" },
                "RouteTableId": { "Ref": "PrivateSubnetRouteTable" }
            }
        },
        "PrivateSubnet1": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "AvailabilityZone": { "Fn::FindInMap": [ "RegionZoneMap", { "Ref": "AWS::Region" }, "AZ1" ] },
                "CidrBlock": {
                    "Fn::FindInMap": [ "AZ2PrivateSubnet", { "Ref": "AWS::Region" }, "AZ1" ]
                },
                "Tags": [
                    { "Key": "Name", "Value": {
                        "Fn::Join": [ "-", [
                            "indigo",
                            { "Ref" : "VPCName" },
                            "private",
                            { "Fn::FindInMap": [ "RegionZoneMap", { "Ref": "AWS::Region" }, "AZ1" ] }
                        ]]
                    }}
                ]
            }
        },
        "PrivateSubnet2": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "AvailabilityZone": { "Fn::FindInMap": [ "RegionZoneMap", { "Ref": "AWS::Region" }, "AZ2" ] },
                "CidrBlock": {
                    "Fn::FindInMap": [ "AZ2PrivateSubnet", { "Ref": "AWS::Region" }, "AZ2" ]
                },
                "Tags": [
                    { "Key": "Name", "Value": {
                        "Fn::Join": [ "-", [
                            "indigo",
                            { "Ref" : "VPCName" },
                            "private",
                            { "Fn::FindInMap": [ "RegionZoneMap", { "Ref": "AWS::Region" }, "AZ2" ] }
                        ]]
                    }}
                ]
            }
        },
        "PrivateSubnet3": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "AvailabilityZone": { "Fn::FindInMap": [ "RegionZoneMap", { "Ref": "AWS::Region" }, "AZ3" ] },
                "CidrBlock": {
                    "Fn::FindInMap": [ "AZ2PrivateSubnet", { "Ref": "AWS::Region" }, "AZ3" ]
                },
                "Tags": [
                    { "Key": "Name", "Value": {
                        "Fn::Join": [ "-", [
                            "indigo",
                            { "Ref" : "VPCName" },
                            "private",
                            { "Fn::FindInMap": [ "RegionZoneMap", { "Ref": "AWS::Region" }, "AZ3" ] }
                        ]]
                    }}
                ]
            }
        },
        "PrivateSubnet1RouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PrivateSubnet1"
                },
                "RouteTableId": {
                    "Ref": "PrivateSubnetRouteTable"
                }
            }
        },
        "PrivateSubnet2RouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PrivateSubnet2"
                },
                "RouteTableId": {
                    "Ref": "PrivateSubnetRouteTable"
                }
            }
        },
        "PrivateSubnet3RouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PrivateSubnet3"
                },
                "RouteTableId": {
                    "Ref": "PrivateSubnetRouteTable"
                }
            }
        },
        "WaitHandleOpenVPNDevice" : {
            "Type" : "AWS::CloudFormation::WaitConditionHandle",
            "Properties" : {}
        },
        "WaitConditionOpenVPNDevice" : {
            "Type" : "AWS::CloudFormation::WaitCondition",
            "DependsOn" : "OpenVPNDevice",
            "Properties" : {
                "Handle" : { "Ref" : "WaitHandleOpenVPNDevice" },
                "Timeout" : "600"
            }
        }
    },
    "Outputs": {
        "OpenVPN": {
            "Value": { "Ref": "OpenVPNIPAddress" }
        }
    }
}
