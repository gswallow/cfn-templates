{
  "Mappings": {
    "RegionToPreciseAmi": {
      "us-east-1": {
        "Ami": "ami-e6296b8e"
      },
      "us-west-1": {
        "Ami": "ami-fa5843bf"
      },
      "us-west-2": {
        "Ami": "ami-f78bd0c7"
      },
      "eu-west-1": {
        "Ami": "ami-c75bd5b0"
      },
      "eu-central-1": {
        "Ami": "ami-18cbf805"
      }
    }
  },
  "Parameters": {
    "SshKeyPair": {
      "Description": "Amazon EC2 key pair",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    "ChefValidatorKeyBucket": {
      "Type": "String",
      "AllowedPattern": "[\\x20-\\x7E]*",
      "Default": "indigo-chef-us-west-2",
      "Description": "An S3 bucket that contains the Chef validator private key.",
      "ConstraintDescription": "can only contain ASCII characters"
    },
    "FileserverInstanceType": {
      "Type": "String",
      "AllowedValues": [
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "c3.large",
        "c3.xlarge",
        "c4.2xlarge",
        "c4.4xlarge",
        "c4.8xlarge",
        "c4.large",
        "c4.xlarge",
        "i2.2xlarge",
        "i2.4xlarge",
        "i2.8xlarge",
        "i2.xlarge",
        "m3.2xlarge",
        "m3.large",
        "m3.medium",
        "m3.xlarge",
        "r3.2xlarge",
        "r3.4xlarge",
        "r3.8xlarge",
        "r3.large",
        "r3.xlarge",
        "t2.medium",
        "t2.micro",
        "t2.small"
      ],
      "Default": "t2.small"
    },
    "FileserverAssociatePublicIpAddress": {
      "Type": "String",
      "AllowedValues": [
        "true",
        "false"
      ],
      "Default": "false",
      "Description": "Associate public IP addresses to instances"
    },
    "FileserverChefRunList": {
      "Type": "CommaDelimitedList",
      "Default": "role[base],role[file_server]",
      "Description": "The run list to run when Chef client is invoked"
    },
    "ChefValidationClientName": {
      "Type": "String",
      "AllowedPattern": "[\\x20-\\x7E]*",
      "Default": "product_dev-validator",
      "Description": "Chef validation client name; see https://docs.chef.io/chef_private_keys.html",
      "ConstraintDescription": "can only contain ASCII characters"
    },
    "ChefEnvironment": {
      "Type": "String",
      "AllowedPattern": "[\\x20-\\x7E]*",
      "Default": "dr",
      "Description": "The Chefenvironment in which to bootstrap the instance",
      "ConstraintDescription": "can only contain ASCII characters"
    },
    "ChefServerUrl": {
      "Type": "String",
      "AllowedPattern": "[\\x20-\\x7E]*",
      "ConstraintDescription": "can only contain ASCII characters",
      "Default": "https://api.opscode.com/organizations/product_dev"
    },
    "FileserverEbsVolumeSize": {
      "Type": "Number",
      "MinValue": "1",
      "MaxValue": "1000",
      "Default": 10
    },
    "FileserverEbsVolumeType": {
      "Type": "String",
      "AllowedValues": [
        "standard",
        "gp2",
        "io1"
      ],
      "Default": "gp2",
      "Description": "Magnetic (standard), General Purpose (gp2), or Provisioned IOPS (io1)"
    },
    "FileserverEbsProvisionedIops": {
      "Type": "Number",
      "MinValue": "1",
      "MaxValue": "4000",
      "Default": "300"
    },
    "FileserverDeleteEbsVolumeOnTermination": {
      "Type": "String",
      "AllowedValues": [
        "true",
        "false"
      ],
      "Default": "true"
    },
    "FileserverInstancesEbsOptimized": {
      "Type": "String",
      "AllowedValues": [
        "true",
        "false"
      ],
      "Default": "false",
      "Description": "Create an EBS-optimized instance (additional charges apply)"
    },
    "FileserverMinSize": {
      "Type": "Number",
      "MinValue": 0,
      "Default": 0,
      "Description": "The minimum number of instances to maintain in the fileserver auto scaling group",
      "ConstraintDescription": "Must be a number 1 or higher"
    },
    "FileserverDesiredCapacity": {
      "Type": "Number",
      "MinValue": 1,
      "Default": 1,
      "Description": "The desired number of instances to maintain in the fileserver auto scaling group",
      "ConstraintDescription": "Must be a number 1 or higher"
    },
    "FileserverMaxSize": {
      "Type": "Number",
      "MaxValue": 100,
      "Default": 1,
      "Description": "The minimum number of instances to maintain in the fileserver auto scaling group",
      "ConstraintDescription": "Must be a number 100 or lower"
    },
    "FileserverNotificationTopic": {
      "Type": "String",
      "AllowedPattern": "[\\x20-\\x7E]*",
      "Default": "arn:aws:sns:us-west-2:294091367658:indigo-us-west-2-terminated-instances",
      "Description": "SNS notification topic to send on instance termination",
      "ConstraintDescription": "can only contain ASCII characters"
    }
  },
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Creates an auto scaling groups containing file server instances, each with a pair of EBS volumes to attach in a RAID-1\npair.  Each instance is given an IAM instance profile, which allows the instance to get validator keys and encrypted\ndata bag secrets from the Chef validator key bucket.\n\nLaunch this template while launching the databases.rb and rabbitmq.rb templates.  Launching this stack depends on\na VPC with a matching environment.\n",
  "Resources": {
    "DefaultIamInstanceProfile": {
      "DependsOn": "DefaultIamInstancePolicy",
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "DefaultIamInstanceRole"
          }
        ]
      }
    },
    "DefaultIamInstanceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/"
      }
    },
    "DefaultIamInstancePolicy": {
      "DependsOn": "DefaultIamInstanceRole",
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "chefValidatorKeyAccess",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": [
                "s3:GetObject"
              ],
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::",
                      {
                        "Ref": "ChefValidatorKeyBucket"
                      },
                      "/*"
                    ]
                  ]
                }
              ],
              "Effect": "Allow"
            },
            {
              "Action": [
                "cloudformation:DescribeStackResource",
                "cloudformation:SignalResource"
              ],
              "Resource": "*",
              "Effect": "Allow"
            }
          ]
        },
        "Roles": [
          {
            "Ref": "DefaultIamInstanceRole"
          }
        ]
      }
    },
    "FileserverLaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "config": {
            "files": {
              "/etc/chef/client.rb": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "chef_server_url             \"",
                      {
                        "Ref": "ChefServerUrl"
                      },
                      "\"\n",
                      "validation_client_name      \"",
                      {
                        "Ref": "ChefValidationClientName"
                      },
                      "\"\n",
                      "log_level                   :info\n",
                      "log_location                STDOUT\n",
                      "file_cache_path             \"/var/chef-solo\"\n",
                      "cookbook_path               \"/var/chef-solo/cookbooks\"\n",
                      "enable_reporting_url_fatals false\n"
                    ]
                  ]
                },
                "mode": "000644",
                "owner": "root",
                "group": "root"
              },
              "/home/ubuntu/.s3cfg": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[default]\n",
                      "access_key =\n",
                      "secret_key =\n",
                      "security_token =\n",
                      "use_https = True\n"
                    ]
                  ]
                },
                "mode": "000644",
                "owner": "root",
                "group": "root"
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "RegionToPreciseAmi",
            {
              "Ref": "AWS::Region"
            },
            "Ami"
          ]
        },
        "InstanceType": {
          "Ref": "FileserverInstanceType"
        },
        "IamInstanceProfile": {
          "Ref": "DefaultIamInstanceProfile"
        },
        "AssociatePublicIpAddress": {
          "Ref": "FileserverAssociatePublicIpAddress"
        },
        "KeyName": {
          "Ref": "SshKeyPair"
        },
        "SecurityGroups": [
          "sg-56091033"
        ],
        "EbsOptimized": {
          "Ref": "FileserverInstancesEbsOptimized"
        },
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sdf",
            "Ebs": {
              "Iops": {
                "Fn::If": [
                  "FileserverVolumesAreIo1",
                  {
                    "Ref": "FileserverEbsProvisionedIops"
                  },
                  {
                    "Ref": "AWS::NoValue"
                  }
                ]
              },
              "DeleteOnTermination": {
                "Ref": "FileserverDeleteEbsVolumeOnTermination"
              },
              "VolumeType": {
                "Ref": "FileserverEbsVolumeType"
              },
              "VolumeSize": {
                "Ref": "FileserverEbsVolumeSize"
              }
            }
          },
          {
            "DeviceName": "/dev/sdg",
            "Ebs": {
              "Iops": {
                "Fn::If": [
                  "FileserverVolumesAreIo1",
                  {
                    "Ref": "FileserverEbsProvisionedIops"
                  },
                  {
                    "Ref": "AWS::NoValue"
                  }
                ]
              },
              "DeleteOnTermination": {
                "Ref": "FileserverDeleteEbsVolumeOnTermination"
              },
              "VolumeType": {
                "Ref": "FileserverEbsVolumeType"
              },
              "VolumeSize": {
                "Ref": "FileserverEbsVolumeSize"
              }
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n\n",
                "# We are using resource signaling, rather than wait condition handles\n",
                "# http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-signal.html\n",
                "function cfn_signal_and_exit\n",
                "{\n",
                "  status=$?\n",
                "  /usr/local/bin/cfn-signal ",
                "   --role ",
                {
                  "Ref": "DefaultIamInstanceRole"
                },
                "   --region ",
                {
                  "Ref": "AWS::Region"
                },
                "   --resource ",
                "FileserverAsg",
                "   --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                "   --exit-code $status\n",
                "  exit $status\n",
                "}\n\n",
                "apt-get update\n",
                "apt-get -y install python-setuptools python-pip\n",
                "apt-get -y install --reinstall ca-certificates\n",
                "pip install s3cmd lockfile\n",
                "mkdir -p /etc/chef/ohai/hints\n",
                "touch /etc/chef/ohai/hints/ec2.json\n",
                "easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n\n",
                "/usr/local/bin/cfn-init -s ",
                {
                  "Ref": "AWS::StackName"
                },
                " --resource ",
                "FileserverLaunchConfig",
                "   --region ",
                {
                  "Ref": "AWS::Region"
                },
                " || cfn_signal_and_exit\n\n",
                "# Bootstrap Chef\n",
                "curl -sL https://www.chef.io/chef/install.sh | sudo bash >> /tmp/cfn-init.log 2>&1 || cfn_signal_and_exit\n",
                "s3cmd -c /home/ubuntu/.s3cfg get s3://",
                {
                  "Ref": "ChefValidatorKeyBucket"
                },
                "/validation.pem /etc/chef/validation.pem >> /tmp/cfn-init.log 2>&1 || cfn_signal_and_exit\n",
                "s3cmd -c /home/ubuntu/.s3cfg get s3://",
                {
                  "Ref": "ChefValidatorKeyBucket"
                },
                "/encrypted_data_bag_secret /etc/chef/encrypted_data_bag_secret >> /tmp/cfn-init.log 2>&1 || cfn_signal_and_exit\n",
                "chmod 0600 /etc/chef/encrypted_data_bag_secret\n",
                "echo '{ \"run_list\": [ \"",
                {
                  "Fn::Join": [
                    "\", \"",
                    {
                      "Ref": "FileserverChefRunList"
                    }
                  ]
                },
                "\" ] }' > /etc/chef/first-run.json\n",
                "chef-client -E ",
                {
                  "Ref": "ChefEnvironment"
                },
                " -j /etc/chef/first-run.json >> /tmp/cfn-init.log 2>&1 || cfn_signal_and_exit\n\n",
                "cfn_signal_and_exit\n"
              ]
            ]
          }
        }
      }
    },
    "FileserverAsg": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "CreationPolicy": {
        "ResourceSignal": {
          "Count": {
            "Ref": "FileserverDesiredCapacity"
          },
          "Timeout": "PT1H"
        }
      },
      "Properties": {
        "AvailabilityZones": {
          "Fn::GetAZs": ""
        },
        "MinSize": {
          "Ref": "FileserverMinSize"
        },
        "DesiredCapacity": {
          "Ref": "FileserverDesiredCapacity"
        },
        "MaxSize": {
          "Ref": "FileserverMaxSize"
        },
        "VPCZoneIdentifier": [
          "subnet-7a27431f",
          "subnet-ae62bcf7",
          "subnet-dac379ad"
        ],
        "LaunchConfigurationName": {
          "Ref": "FileserverLaunchConfig"
        },
        "NotificationConfiguration": {
          "TopicARN": {
            "Ref": "FileserverNotificationTopic"
          },
          "NotificationTypes": [
            "autoscaling:EC2_INSTANCE_TERMINATE"
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "fileserver_asg_instance",
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "Environment",
            "Value": "dr",
            "PropagateAtLaunch": "true"
          }
        ]
      }
    }
  },
  "Conditions": {
    "FileserverVolumesAreIo1": {
      "Fn::Equals": [
        {
          "Ref": "FileserverEbsVolumeType"
        },
        "io1"
      ]
    }
  }
}
