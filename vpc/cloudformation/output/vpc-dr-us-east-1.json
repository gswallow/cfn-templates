{
  "Mappings": {
    "CidrToRegion": {
      "us-east-1": {
        "Cidr": "172.20.0.0/16"
      },
      "us-west-1": {
        "Cidr": "172.22.0.0/16"
      },
      "us-west-2": {
        "Cidr": "172.24.0.0/16"
      },
      "eu-west-1": {
        "Cidr": "172.26.0.0/16"
      },
      "eu-central-1": {
        "Cidr": "172.28.0.0/16"
      }
    },
    "SubnetsToAz": {
      "us-east-1": {
        "UsEast1aPublic": "172.20.0.0/20",
        "UsEast1aPrivate": "172.20.240.0/20",
        "UsEast1cPublic": "172.20.16.0/20",
        "UsEast1cPrivate": "172.20.224.0/20",
        "UsEast1dPublic": "172.20.32.0/20",
        "UsEast1dPrivate": "172.20.208.0/20",
        "UsEast1ePublic": "172.20.48.0/20",
        "UsEast1ePrivate": "172.20.192.0/20"
      }
    },
    "RegionToNatAmi": {
      "us-east-1": {
        "Ami": "ami-146e2a7c"
      },
      "us-west-1": {
        "Ami": "ami-42908907"
      },
      "us-west-2": {
        "Ami": "ami-dfc39aef"
      },
      "eu-west-1": {
        "Ami": "ami-9d23aeea"
      },
      "eu-central-1": {
        "Ami": "ami-04003319"
      }
    }
  },
  "Resources": {
    "Igw": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
      }
    },
    "VpcIgwAttachment": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "InternetGatewayId": {
          "Ref": "Igw"
        },
        "VpcId": {
          "Ref": "Vpc"
        }
      }
    },
    "DefaultRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "DefaultRouteTable"
          }
        ]
      }
    },
    "DefaultRouteThroughIgw": {
      "DependsOn": "VpcIgwAttachment",
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "Igw"
        },
        "RouteTableId": {
          "Ref": "DefaultRouteTable"
        }
      }
    },
    "NatInstanceIamProfile": {
      "DependsOn": "NatInstanceIamPolicies",
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "NatInstanceIamRole"
          }
        ]
      }
    },
    "NatInstanceIamRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/"
      }
    },
    "NatInstanceIamPolicies": {
      "DependsOn": "NatInstanceIamRole",
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "allow-nat-instance-to-modify-private-subnet-route-tables",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": [
                "ec2:DescribeInstances",
                "ec2:ModifyInstanceAttribute",
                "ec2:DescribeSubnets",
                "ec2:DescribeRouteTables",
                "ec2:CreateRoute",
                "ec2:ReplaceRoute"
              ],
              "Resource": [
                "*"
              ],
              "Effect": "Allow"
            }
          ]
        },
        "Roles": [
          {
            "Ref": "NatInstanceIamRole"
          }
        ]
      }
    },
    "Vpc": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": {
          "Fn::FindInMap": [
            "CidrToRegion",
            {
              "Ref": "AWS::Region"
            },
            "Cidr"
          ]
        },
        "EnableDnsSupport": {
          "Ref": "EnableDnsHostnames"
        },
        "EnableDnsHostnames": {
          "Ref": "EnableDnsHostnames"
        },
        "InstanceTenancy": {
          "Ref": "InstanceTenancy"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "VpcName"
            }
          },
          {
            "Key": "Environment",
            "Value": "dr"
          }
        ]
      }
    },
    "PublicUsEast1aSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "AvailabilityZone": "us-east-1a",
        "CidrBlock": {
          "Fn::FindInMap": [
            "SubnetsToAz",
            {
              "Ref": "AWS::Region"
            },
            "UsEast1aPublic"
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  "public_us-east-1a",
                  {
                    "Fn::FindInMap": [
                      "SubnetsToAz",
                      {
                        "Ref": "AWS::Region"
                      },
                      "UsEast1aPublic"
                    ]
                  }
                ]
              ]
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          },
          {
            "Key": "Environment",
            "Value": "dr"
          }
        ]
      }
    },
    "PublicUsEast1aDefaultRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicUsEast1aSubnet"
        },
        "RouteTableId": {
          "Ref": "DefaultRouteTable"
        }
      }
    },
    "PrivateUsEast1aRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "private_us_east_1a_route_table"
          }
        ]
      }
    },
    "PrivateUsEast1aSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "AvailabilityZone": "us-east-1a",
        "CidrBlock": {
          "Fn::FindInMap": [
            "SubnetsToAz",
            {
              "Ref": "AWS::Region"
            },
            "UsEast1aPrivate"
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  "private_us-east-1a",
                  {
                    "Fn::FindInMap": [
                      "SubnetsToAz",
                      {
                        "Ref": "AWS::Region"
                      },
                      "UsEast1aPrivate"
                    ]
                  }
                ]
              ]
            }
          },
          {
            "Key": "Network",
            "Value": "Private"
          },
          {
            "Key": "Environment",
            "Value": "dr"
          }
        ]
      }
    },
    "PrivateUsEast1aPrivateUsEast1aRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateUsEast1aSubnet"
        },
        "RouteTableId": {
          "Ref": "PrivateUsEast1aRouteTable"
        }
      }
    },
    "PublicUsEast1cSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "AvailabilityZone": "us-east-1c",
        "CidrBlock": {
          "Fn::FindInMap": [
            "SubnetsToAz",
            {
              "Ref": "AWS::Region"
            },
            "UsEast1cPublic"
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  "public_us-east-1c",
                  {
                    "Fn::FindInMap": [
                      "SubnetsToAz",
                      {
                        "Ref": "AWS::Region"
                      },
                      "UsEast1cPublic"
                    ]
                  }
                ]
              ]
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          },
          {
            "Key": "Environment",
            "Value": "dr"
          }
        ]
      }
    },
    "PublicUsEast1cDefaultRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicUsEast1cSubnet"
        },
        "RouteTableId": {
          "Ref": "DefaultRouteTable"
        }
      }
    },
    "PrivateUsEast1cRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "private_us_east_1c_route_table"
          }
        ]
      }
    },
    "PrivateUsEast1cSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "AvailabilityZone": "us-east-1c",
        "CidrBlock": {
          "Fn::FindInMap": [
            "SubnetsToAz",
            {
              "Ref": "AWS::Region"
            },
            "UsEast1cPrivate"
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  "private_us-east-1c",
                  {
                    "Fn::FindInMap": [
                      "SubnetsToAz",
                      {
                        "Ref": "AWS::Region"
                      },
                      "UsEast1cPrivate"
                    ]
                  }
                ]
              ]
            }
          },
          {
            "Key": "Network",
            "Value": "Private"
          },
          {
            "Key": "Environment",
            "Value": "dr"
          }
        ]
      }
    },
    "PrivateUsEast1cPrivateUsEast1cRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateUsEast1cSubnet"
        },
        "RouteTableId": {
          "Ref": "PrivateUsEast1cRouteTable"
        }
      }
    },
    "PublicUsEast1dSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "AvailabilityZone": "us-east-1d",
        "CidrBlock": {
          "Fn::FindInMap": [
            "SubnetsToAz",
            {
              "Ref": "AWS::Region"
            },
            "UsEast1dPublic"
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  "public_us-east-1d",
                  {
                    "Fn::FindInMap": [
                      "SubnetsToAz",
                      {
                        "Ref": "AWS::Region"
                      },
                      "UsEast1dPublic"
                    ]
                  }
                ]
              ]
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          },
          {
            "Key": "Environment",
            "Value": "dr"
          }
        ]
      }
    },
    "PublicUsEast1dDefaultRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicUsEast1dSubnet"
        },
        "RouteTableId": {
          "Ref": "DefaultRouteTable"
        }
      }
    },
    "PrivateUsEast1dRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "private_us_east_1d_route_table"
          }
        ]
      }
    },
    "PrivateUsEast1dSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "AvailabilityZone": "us-east-1d",
        "CidrBlock": {
          "Fn::FindInMap": [
            "SubnetsToAz",
            {
              "Ref": "AWS::Region"
            },
            "UsEast1dPrivate"
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  "private_us-east-1d",
                  {
                    "Fn::FindInMap": [
                      "SubnetsToAz",
                      {
                        "Ref": "AWS::Region"
                      },
                      "UsEast1dPrivate"
                    ]
                  }
                ]
              ]
            }
          },
          {
            "Key": "Network",
            "Value": "Private"
          },
          {
            "Key": "Environment",
            "Value": "dr"
          }
        ]
      }
    },
    "PrivateUsEast1dPrivateUsEast1dRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateUsEast1dSubnet"
        },
        "RouteTableId": {
          "Ref": "PrivateUsEast1dRouteTable"
        }
      }
    },
    "PublicUsEast1eSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "AvailabilityZone": "us-east-1e",
        "CidrBlock": {
          "Fn::FindInMap": [
            "SubnetsToAz",
            {
              "Ref": "AWS::Region"
            },
            "UsEast1ePublic"
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  "public_us-east-1e",
                  {
                    "Fn::FindInMap": [
                      "SubnetsToAz",
                      {
                        "Ref": "AWS::Region"
                      },
                      "UsEast1ePublic"
                    ]
                  }
                ]
              ]
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          },
          {
            "Key": "Environment",
            "Value": "dr"
          }
        ]
      }
    },
    "PublicUsEast1eDefaultRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicUsEast1eSubnet"
        },
        "RouteTableId": {
          "Ref": "DefaultRouteTable"
        }
      }
    },
    "PrivateUsEast1eRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "private_us_east_1e_route_table"
          }
        ]
      }
    },
    "PrivateUsEast1eSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "AvailabilityZone": "us-east-1e",
        "CidrBlock": {
          "Fn::FindInMap": [
            "SubnetsToAz",
            {
              "Ref": "AWS::Region"
            },
            "UsEast1ePrivate"
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  "private_us-east-1e",
                  {
                    "Fn::FindInMap": [
                      "SubnetsToAz",
                      {
                        "Ref": "AWS::Region"
                      },
                      "UsEast1ePrivate"
                    ]
                  }
                ]
              ]
            }
          },
          {
            "Key": "Network",
            "Value": "Private"
          },
          {
            "Key": "Environment",
            "Value": "dr"
          }
        ]
      }
    },
    "PrivateUsEast1ePrivateUsEast1eRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateUsEast1eSubnet"
        },
        "RouteTableId": {
          "Ref": "PrivateUsEast1eRouteTable"
        }
      }
    },
    "NatSg": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "nat security group",
        "VpcId": {
          "Ref": "Vpc"
        },
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "IpProtocol": "icmp",
            "FromPort": "0",
            "ToPort": "-1"
          },
          {
            "CidrIp": "0.0.0.0/0",
            "IpProtocol": "icmp",
            "FromPort": "3",
            "ToPort": "-1"
          },
          {
            "CidrIp": "0.0.0.0/0",
            "IpProtocol": "icmp",
            "FromPort": "5",
            "ToPort": "-1"
          },
          {
            "CidrIp": "0.0.0.0/0",
            "IpProtocol": "icmp",
            "FromPort": "11",
            "ToPort": "-1"
          },
          {
            "CidrIp": "0.0.0.0/0",
            "IpProtocol": "icmp",
            "FromPort": "12",
            "ToPort": "-1"
          },
          {
            "CidrIp": {
              "Ref": "AllowSshFrom"
            },
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22"
          }
        ],
        "SecurityGroupEgress": [

        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "nat_sg"
          }
        ]
      }
    },
    "NatSgIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "NatSg",
            "GroupId"
          ]
        },
        "IpProtocol": "-1",
        "FromPort": "-1",
        "ToPort": "-1",
        "GroupId": {
          "Fn::GetAtt": [
            "NatSg",
            "GroupId"
          ]
        }
      }
    },
    "PublicElbSg": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "public_elb security group",
        "VpcId": {
          "Ref": "Vpc"
        },
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80"
          },
          {
            "CidrIp": "0.0.0.0/0",
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443"
          }
        ],
        "SecurityGroupEgress": [

        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "public_elb_sg"
          }
        ]
      }
    },
    "PublicElbSgIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "PublicElbSg",
            "GroupId"
          ]
        },
        "IpProtocol": "-1",
        "FromPort": "-1",
        "ToPort": "-1",
        "GroupId": {
          "Fn::GetAtt": [
            "PublicElbSg",
            "GroupId"
          ]
        }
      }
    },
    "VpnSg": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "vpn security group",
        "VpcId": {
          "Ref": "Vpc"
        },
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "IpProtocol": "icmp",
            "FromPort": "0",
            "ToPort": "-1"
          },
          {
            "CidrIp": "0.0.0.0/0",
            "IpProtocol": "icmp",
            "FromPort": "3",
            "ToPort": "-1"
          },
          {
            "CidrIp": "0.0.0.0/0",
            "IpProtocol": "icmp",
            "FromPort": "5",
            "ToPort": "-1"
          },
          {
            "CidrIp": "0.0.0.0/0",
            "IpProtocol": "icmp",
            "FromPort": "11",
            "ToPort": "-1"
          },
          {
            "CidrIp": "0.0.0.0/0",
            "IpProtocol": "icmp",
            "FromPort": "12",
            "ToPort": "-1"
          },
          {
            "CidrIp": {
              "Ref": "AllowSshFrom"
            },
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22"
          },
          {
            "CidrIp": {
              "Ref": "AllowUdp1194From"
            },
            "IpProtocol": "udp",
            "FromPort": "1194",
            "ToPort": "1194"
          }
        ],
        "SecurityGroupEgress": [

        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "vpn_sg"
          }
        ]
      }
    },
    "VpnSgIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "VpnSg",
            "GroupId"
          ]
        },
        "IpProtocol": "-1",
        "FromPort": "-1",
        "ToPort": "-1",
        "GroupId": {
          "Fn::GetAtt": [
            "VpnSg",
            "GroupId"
          ]
        }
      }
    },
    "PrivateSg": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "private security group",
        "VpcId": {
          "Ref": "Vpc"
        },
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "IpProtocol": "icmp",
            "FromPort": "0",
            "ToPort": "-1"
          },
          {
            "CidrIp": "0.0.0.0/0",
            "IpProtocol": "icmp",
            "FromPort": "3",
            "ToPort": "-1"
          },
          {
            "CidrIp": "0.0.0.0/0",
            "IpProtocol": "icmp",
            "FromPort": "5",
            "ToPort": "-1"
          },
          {
            "CidrIp": "0.0.0.0/0",
            "IpProtocol": "icmp",
            "FromPort": "11",
            "ToPort": "-1"
          },
          {
            "CidrIp": "0.0.0.0/0",
            "IpProtocol": "icmp",
            "FromPort": "12",
            "ToPort": "-1"
          }
        ],
        "SecurityGroupEgress": [

        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "private_sg"
          }
        ]
      }
    },
    "PrivateSgIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "PrivateSg",
            "GroupId"
          ]
        },
        "IpProtocol": "-1",
        "FromPort": "-1",
        "ToPort": "-1",
        "GroupId": {
          "Fn::GetAtt": [
            "PrivateSg",
            "GroupId"
          ]
        }
      }
    },
    "NginxSg": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "nginx security group",
        "VpcId": {
          "Ref": "Vpc"
        },
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "IpProtocol": "icmp",
            "FromPort": "0",
            "ToPort": "-1"
          },
          {
            "CidrIp": "0.0.0.0/0",
            "IpProtocol": "icmp",
            "FromPort": "3",
            "ToPort": "-1"
          },
          {
            "CidrIp": "0.0.0.0/0",
            "IpProtocol": "icmp",
            "FromPort": "5",
            "ToPort": "-1"
          },
          {
            "CidrIp": "0.0.0.0/0",
            "IpProtocol": "icmp",
            "FromPort": "11",
            "ToPort": "-1"
          },
          {
            "CidrIp": "0.0.0.0/0",
            "IpProtocol": "icmp",
            "FromPort": "12",
            "ToPort": "-1"
          }
        ],
        "SecurityGroupEgress": [

        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "nginx_sg"
          }
        ]
      }
    },
    "NginxSgIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "NginxSg",
            "GroupId"
          ]
        },
        "IpProtocol": "-1",
        "FromPort": "-1",
        "ToPort": "-1",
        "GroupId": {
          "Fn::GetAtt": [
            "NginxSg",
            "GroupId"
          ]
        }
      }
    },
    "PublicElbToNginxHttpIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "PublicElbSg",
            "GroupId"
          ]
        },
        "IpProtocol": "tcp",
        "FromPort": "80",
        "ToPort": "80",
        "GroupId": {
          "Fn::GetAtt": [
            "NginxSg",
            "GroupId"
          ]
        }
      }
    },
    "PublicElbToNginxHttpsIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "PublicElbSg",
            "GroupId"
          ]
        },
        "IpProtocol": "tcp",
        "FromPort": "443",
        "ToPort": "443",
        "GroupId": {
          "Fn::GetAtt": [
            "NginxSg",
            "GroupId"
          ]
        }
      }
    },
    "NatToPrivateSshIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "NatSg",
            "GroupId"
          ]
        },
        "IpProtocol": "-1",
        "FromPort": "-1",
        "ToPort": "-1",
        "GroupId": {
          "Fn::GetAtt": [
            "PrivateSg",
            "GroupId"
          ]
        }
      }
    },
    "VpnToPrivateSshIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "VpnSg",
            "GroupId"
          ]
        },
        "IpProtocol": "-1",
        "FromPort": "-1",
        "ToPort": "-1",
        "GroupId": {
          "Fn::GetAtt": [
            "PrivateSg",
            "GroupId"
          ]
        }
      }
    },
    "PrivateToNatAllIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "PrivateSg",
            "GroupId"
          ]
        },
        "IpProtocol": "-1",
        "FromPort": "-1",
        "ToPort": "-1",
        "GroupId": {
          "Fn::GetAtt": [
            "NatSg",
            "GroupId"
          ]
        }
      }
    },
    "NatInstancesLaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "RegionToNatAmi",
            {
              "Ref": "AWS::Region"
            },
            "Ami"
          ]
        },
        "InstanceType": {
          "Ref": "NatInstanceType"
        },
        "AssociatePublicIpAddress": "true",
        "IamInstanceProfile": {
          "Ref": "NatInstanceIamProfile"
        },
        "KeyName": {
          "Ref": "SshKeyPair"
        },
        "SecurityGroups": [
          {
            "Ref": "NatSg"
          }
        ],
        "UserData": {
          "Fn::Base64": "#!/bin/bash\n#\n# Copyright 2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\").\n# You may not use this file except in compliance with the License.\n# A copy of the License is located at\n#\n#  http://aws.amazon.com/apache2.0\n#\n# or in the \"license\" file accompanying this file. This file is distributed\n# on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n# express or implied. See the License for the specific language governing\n# permissions and limitations under the License.\n#\n# HA NAT User Data Script\n# Configures the instance to function as a PAT / NAT device and then\n# creates a default NAT route for Route Tables associated to subnets that are:\n# 1. tagged with key/value \"network=private\"\n# 2. in the same VPC as the instance running script\n# 3. in the same AZ as the instance running script\n#\n# Prerequisites:\n#\n# 1. Instance should be in an Availability Autoscaling group with min/max size of 1\n#    Example Autoscaling launch configuration:\n#\t\taws autoscaling create-auto-scaling-group --auto-scaling-group-name ha-nat-asg \\\n#\t    --launch-configuration-name ha-nat-launch --min-size 1 --max-size 1 \\\n#\t    --vpc-zone-identifier subnet-xxxxxxxx\n#\n# 2. AWS CLI version 1.2.2 or higher. By default, script will update instance to the latest version.\n# 3. Private subnets must be tagged with tag Name=network and Value=private. Case IS sensitive.\n# 4. IAM EC2 Role must be applied to instance:\n#\n# {\n#   \"Version\": \"2012-10-17\",\n#   \"Statement\": [\n#     {\n#       \"Effect\": \"Allow\",\n#       \"Action\": [\n#     \t  \"ec2:DescribeInstances\",\n#   \t  \"ec2:ModifyInstanceAttribute\",\n#   \t  \"ec2:DescribeSubnets\",\n#   \t  \"ec2:DescribeRouteTables\",\n#   \t  \"ec2:CreateRoute\",\n#   \t  \"ec2:ReplaceRoute\"\n#       ],\n#       \"Resource\": \"*\"\n#     }\n#   ]\n# }\n#\n#\n# Caveats:\n#\tIf the VPC configuration uses a single Route Table associated to multiple private subnets\n#   in multiple AZs, then the HA NAT script would modify private subnets in other AZs. The\n#   recommended HA NAT configuration is 1 NAT per AZ and 1 unique private Route Table per AZ.\n\n# Enable for debugging\n# set -x\n\nfunction log { logger -t \"vpc\" -- $1; }\n\nfunction die {\n  [ -n \"$1\" ] && log \"$1\"\n  log \"Configuration of HA NAT failed!\"\n  exit 1\n}\n\n# Sanitize PATH\nPATH=\"/usr/sbin:/sbin:/usr/bin:/bin\"\n\n# Configure the instance to run as a Port Address Translator (PAT) to provide\n# Internet connectivity to private instances.\n\nlog \"Beginning Port Address Translator (PAT) configuration...\"\n\nlog \"Determining the MAC address on eth0...\"\nETH0_MAC=$(cat /sys/class/net/eth0/address) ||\n  die \"Unable to determine MAC address on eth0.\"\nlog \"Found MAC ${ETH0_MAC} for eth0.\"\n\nVPC_CIDR_URI=\"http://169.254.169.254/latest/meta-data/network/interfaces/macs/${ETH0_MAC}/vpc-ipv4-cidr-block\"\nlog \"Metadata location for vpc ipv4 range: ${VPC_CIDR_URI}\"\n\nVPC_CIDR_RANGE=$(curl --retry 3 --silent --fail ${VPC_CIDR_URI})\nif [ $? -ne 0 ]; then\n  log \"Unable to retrive VPC CIDR range from meta-data, using 0.0.0.0/0 instead. PAT may be insecure!\"\n  VPC_CIDR_RANGE=\"0.0.0.0/0\"\nelse\n  log \"Retrieved VPC CIDR range ${VPC_CIDR_RANGE} from meta-data.\"\nfi\n\nlog \"Enabling PAT...\"\nsysctl -q -w net.ipv4.ip_forward=1 net.ipv4.conf.eth0.send_redirects=0 && (\niptables -t nat -C POSTROUTING -o eth0 -s ${VPC_CIDR_RANGE} -j MASQUERADE 2> /dev/null ||\n  iptables -t nat -A POSTROUTING -o eth0 -s ${VPC_CIDR_RANGE} -j MASQUERADE ) ||\n  die\n\nsysctl net.ipv4.ip_forward net.ipv4.conf.eth0.send_redirects | log\niptables -n -t nat -L POSTROUTING | log\n\nlog \"Configuration of NAT/PAT complete.\"\n\n# Upgrade AWS CLI to latest version\neasy_install --upgrade awscli &&\n  log \"AWS CLI Upgraded Successfully. Beginning HA NAT configuration...\"\n\n# Set CLI Output to text\nexport AWS_DEFAULT_OUTPUT=\"text\"\n\n# Set Instance Identity URI\nII_URI=\"http://169.254.169.254/latest/dynamic/instance-identity/document\"\n\n# Set region of NAT instance\nREGION=`curl --retry 3 --retry-delay 0 --silent --fail $II_URI | grep region | awk -F\\\" '{print $4}'`\n\n# Set AWS CLI default Region\nexport AWS_DEFAULT_REGION=$REGION\n\n# Set AZ of NAT instance\nAVAILABILITY_ZONE=`curl --retry 3 --retry-delay 0 --silent --fail $II_URI | grep availabilityZone | awk -F\\\" '{print $4}'`\n\n# Set Instance ID from metadata\nINSTANCE_ID=`curl --retry 3 --retry-delay 0 --silent --fail $II_URI | grep instanceId | awk -F\\\" '{print $4}'` ||\n  die \"Unable to determine INSTANCE ID of instance\"\n\n# Set VPC_ID of Instance\nVPC_ID=`aws ec2 describe-instances --instance-ids $INSTANCE_ID --query 'Reservations[*].Instances[*].VpcId'` ||\n  die \"Unable to determine VPC ID for instance.\"\n\n# Determine Main Route Table for the VPC\nMAIN_RT=`aws ec2 describe-route-tables --query 'RouteTables[*].RouteTableId' --filters Name=vpc-id,Values=$VPC_ID Name=association.main,Values=true` ||\n  die \"Unable to determine VPC Main Route Table.\"\n\nlog \"HA NAT configuration parameters: Instance ID=$INSTANCE_ID, Region=$REGION, Availability Zone=$AVAILABILITY_ZONE, VPC=$VPC_ID\"\n\n# Get list of subnets in same VPC that have tag Network=Private\nPRIVATE_SUBNETS=\"`aws ec2 describe-subnets --query 'Subnets[*].SubnetId' \\\n  --filters Name=vpc-id,Values=$VPC_ID Name=state,Values=available Name=tag:Network,Values=Private`\"\n\n# If no private subnets found, exit out\nif [ -z \"$PRIVATE_SUBNETS\" ]; then\n  die \"No private subnets found to modify for HA NAT.\"\nelse\n  log \"Modifying Route Tables for following private subnets: $PRIVATE_SUBNETS\"\nfi\n\nfor subnet in $PRIVATE_SUBNETS; do\n  ROUTE_TABLE_ID=`aws ec2 describe-route-tables --query 'RouteTables[*].RouteTableId' --filters Name=association.subnet-id,Values=$subnet`;\n\n  # If private tagged subnet is associated with Main Routing Table, do not create or modify route.\n  if [ \"$ROUTE_TABLE_ID\" = \"$MAIN_RT\" ]; then\n    log \"$subnet is associated with the VPC Main Route Table. HA NAT script will NOT edit Main Route Table.\"\n\n  # If subnet is not associated with a Route Table, skip it.\n  elif [ -z \"$ROUTE_TABLE_ID\" ]; then\n    log \"$subnet is not associated with a Route Table. Skipping this subnet.\"\n\n  # Modify found private subnet's Routing Table to point to new HA NAT instance id\n  else\n    aws ec2 create-route --route-table-id $ROUTE_TABLE_ID --destination-cidr-block 0.0.0.0/0 --instance-id $INSTANCE_ID &&\n      log \"$ROUTE_TABLE_ID associated with $subnet modified to point default route to $INSTANCE_ID.\"\n\n    if [ $? -ne 0 ] ; then\n      log \"Route already exists, replacing existing route.\"\n      aws ec2 replace-route --route-table-id $ROUTE_TABLE_ID --destination-cidr-block 0.0.0.0/0 --instance-id $INSTANCE_ID\n    fi\n  fi\ndone\n\nif [ $? -ne 0 ] ; then\n  die\nfi\n\n# Turn off source / destination check\naws ec2 modify-instance-attribute --instance-id $INSTANCE_ID --source-dest-check '{\"Value\": false}' &&\n  log \"Source Destination check disabled for $INSTANCE_ID.\"\n\nlog \"Configuration of HA NAT complete.\"\nexit 0\n"
        }
      }
    },
    "NatInstancesAsg": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AvailabilityZones": {
          "Fn::GetAZs": ""
        },
        "MinSize": 0,
        "DesiredCapacity": 1,
        "MaxSize": 1,
        "VPCZoneIdentifier": [
          {
            "Ref": "PublicUsEast1aSubnet"
          },
          {
            "Ref": "PublicUsEast1cSubnet"
          },
          {
            "Ref": "PublicUsEast1dSubnet"
          },
          {
            "Ref": "PublicUsEast1eSubnet"
          }
        ],
        "LaunchConfigurationName": {
          "Ref": "NatInstancesLaunchConfig"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "nat_instances_asg_instance",
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "Environment",
            "Value": "dr",
            "PropagateAtLaunch": "true"
          }
        ]
      }
    },
    "PublicElb": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "DependsOn": [
        "VpcIgwAttachment"
      ],
      "Properties": {
        "CrossZone": "true",
        "LoadBalancerName": "indigo-dr-us-east-1-public-elb",
        "Listeners": [
          {
            "Protocol": "http",
            "LoadBalancerPort": "80",
            "InstanceProtocol": "http",
            "InstancePort": "80"
          },
          {
            "Protocol": "https",
            "LoadBalancerPort": "443",
            "InstanceProtocol": "https",
            "InstancePort": "443",
            "PolicyNames": [
              "ELBSecurityPolicy-2015-03"
            ],
            "SSLCertificateId": {
              "Ref": "ElbSslCertificateId"
            }
          }
        ],
        "Scheme": "internet-facing",
        "Subnets": [
          {
            "Ref": "PublicUsEast1aSubnet"
          },
          {
            "Ref": "PublicUsEast1cSubnet"
          },
          {
            "Ref": "PublicUsEast1dSubnet"
          },
          {
            "Ref": "PublicUsEast1eSubnet"
          }
        ],
        "SecurityGroups": [
          {
            "Ref": "PublicElbSg"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "public_elb"
          },
          {
            "Key": "Environment",
            "Value": "dr"
          }
        ]
      }
    },
    "PublicElbRoute53RecordSet": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "HostedZoneName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "PublicElbDomainName"
              },
              "."
            ]
          ]
        },
        "Name": {
          "Ref": "PublicElbRecord"
        },
        "Type": {
          "Ref": "PublicElbRecordType"
        },
        "ResourceRecords": [
          {
            "Fn::Join": [
              "",
              [
                {
                  "Fn::GetAtt": [
                    "PublicElb",
                    "CanonicalHostedZoneName"
                  ]
                },
                "."
              ]
            ]
          }
        ],
        "TTL": {
          "Ref": "PublicElbTtl"
        }
      }
    },
    "IndigoDrUsEast1VpnElasticIp": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc"
      }
    }
  },
  "Parameters": {
    "SshKeyPair": {
      "Description": "Amazon EC2 key pair",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    "AllowSshFrom": {
      "Type": "String",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "Default": "127.0.0.1/32",
      "Description": "Network to allow SSH from, to NAT instances. Note that the default of 127.0.0.1/32 effectively disables SSH access.",
      "ConstraintDescription": "Must follow IP/mask notation (e.g. 192.168.1.0/24)"
    },
    "AllowUdp1194From": {
      "Type": "String",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "Default": "0.0.0.0/0",
      "Description": "Network to allow UDP port 1194 from, to VPN instances.",
      "ConstraintDescription": "Must follow IP/mask notation (e.g. 192.168.1.0/24)"
    },
    "ElbSslCertificateId": {
      "Type": "String",
      "AllowedValues": [
        "arn:aws:iam::294091367658:server-certificate/indigo-dr-us-west-2-cert",
        "arn:aws:iam::294091367658:server-certificate/indigo-prd-us-west-2-cert",
        "arn:aws:iam::294091367658:server-certificate/indigo-qa1-us-west-2-cert"
      ],
      "Description": "SSL certificate to use with the elastic load balancer"
    },
    "EnableDnsSupport": {
      "Type": "String",
      "AllowedValues": [
        "true",
        "false"
      ],
      "Default": "true",
      "Description": "Specifies whether DNS resolution is supported for the VPC"
    },
    "EnableDnsHostnames": {
      "Type": "String",
      "AllowedValues": [
        "true",
        "false"
      ],
      "Default": "true",
      "Description": "Specifies whether the instances launched in the VPC get DNS hostnames"
    },
    "InstanceTenancy": {
      "Type": "String",
      "AllowedValues": [
        "default",
        "dedicated"
      ],
      "Default": "default",
      "Description": "Dedicated: Any instance launched into the VPC will run on dedicated hardware (increased cost)"
    },
    "VpcName": {
      "Type": "String",
      "AllowedPattern": "[\\x20-\\x7E]*",
      "Default": "indigo-dr-us-east-1-vpc",
      "Description": "Specifies the name of the VPC being created",
      "ConstraintDescription": "can only contain ASCII characters"
    },
    "NatInstanceType": {
      "Type": "String",
      "AllowedValues": [
        "t2.micro",
        "t2.small",
        "t2.medium",
        "m3.medium",
        "m3.large",
        "c4.xlarge"
      ],
      "Default": "t2.micro"
    },
    "PublicElbDomainName": {
      "Type": "String",
      "AllowedPattern": "[\\x20-\\x7E]*",
      "Default": "ascentrecovery.net",
      "Description": "A hosted route53 DNS domain",
      "ConstraintDescription": "can only contain ASCII characters"
    },
    "PublicElbRecord": {
      "Type": "String",
      "AllowedPattern": "[\\x20-\\x7E]*",
      "Default": "indigo-dr-us-east-1-public-elb.ascentrecovery.net.",
      "Description": "The DNS record to add to the ascentrecovery.net domain",
      "ConstraintDescription": "can only contain ASCII characters"
    },
    "PublicElbRecordType": {
      "Type": "String",
      "AllowedValues": [
        "A",
        "AAAA",
        "CNAME",
        "MX",
        "NS",
        "PTR",
        "SOA",
        "SPF",
        "SRV",
        "TXT"
      ],
      "Description": "The DNS record type",
      "Default": "CNAME"
    },
    "PublicElbTtl": {
      "Type": "Number",
      "MinValue": "1",
      "MaxValue": "604800",
      "Description": "The maximum time to live for the DNS record",
      "Default": "3600"
    }
  },
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Creates a Virtual Private Cloud, composed of public and private subnets in each availability zone, an auto scaling\ngroup containing a NAT instance, and an elastic load balancer for inbound HTTP and HTTPS using your uploaded SSL\ncertificate (see http://docs.aws.amazon.com/IAM/latest/UserGuide/InstallCert.html). This template will create security\ngroups allowing network access through the NAT/VPN instances.  By default, SSH access through NAT instances is allowed\nonly from 127.0.0.1/32, effectively blocking SSH access from the Internet.  Setting it to a different CIDR block (e.g.\nyour home office) is a quick way to enable network access to the VPC for testing / troubleshooting purposes.\n\nFinally, this template will set up a DNS record in Route53 pointing to the public Elastic Load Balancer's IP address.\nBy default, the DNS record is a CNAME pointing \"region.domain.net.\" to the public IP address.\n",
  "Outputs": {
    "EipAddress": {
      "Value": {
        "Ref": "IndigoDrUsEast1VpnElasticIp"
      },
      "Description": "indigo-dr-us-east-1-vpn Elastic IP Address"
    }
  }
}
